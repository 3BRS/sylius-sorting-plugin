version: 2.1

workflows:
    workflow:
        jobs:
            -   build:
                    name: php-8.0-sylius-<< matrix.sylius_version >>
                    php_version: "8.0"
                    matrix:
                        parameters:
                            sylius_version: [ "1.11", "1.12" ]
            -   build:
                    name: php-8.1-sylius-<< matrix.sylius_version >>
                    php_version: "8.1"
                    matrix:
                        parameters:
                            sylius_version: [ "1.11", "1.12" ]
            -   build:
                    name: php-8.2-sylius-<< matrix.sylius_version >>
                    php_version: "8.2"
                    matrix:
                        parameters:
                            sylius_version: [ "1.11", "1.12" ]

jobs:
    build:
        parameters:
            sylius_version:
                type: string
            php_version:
                type: string
        docker:
            -   image: webdevops/php-nginx:<< parameters.php_version >>-alpine
            -   image: cimg/mysql:8.0
                environment:
                    MYSQL_USER: sylius
                    MYSQL_PASSWORD: pass
        steps:
            - checkout
            -   run: apk update
            -   run: apk add yarn
            -   run: composer self-update
            -   run: composer require "sylius/sylius:<< parameters.sylius_version >>.*" --no-interaction --no-update

            -   restore_cache:
                    keys:
                        # "composer.lock" can be used if it is committed to the repo
                        - vendor-cache-prefer-dist-{{ checksum "composer.json" }}-{{ checksum "tests/Application/package.json" }}
                        # fallback to using the latest cache if no exact match is found
                        - vendor-cache-
            -   run: composer update --no-interaction --prefer-dist
            -   run: yarn --cwd tests/Application install
            -   run: yarn --cwd tests/Application build
            -   save_cache:
                    key: vendor-cache-prefer-dist-{{ checksum "composer.json" }}-{{ checksum "tests/Application/package.json" }}
                    paths:
                        - ./vendor
                        - ./tests/Application/node_modules
            -   run:
                    name: Wait for database service on the tcp protocol
                    command: dockerize -wait tcp://localhost:3306 -timeout 1m
            -   run: (cd tests/Application && bin/console doctrine:database:create --env=test -vvv)
            -   run: (cd tests/Application && bin/console doctrine:schema:create --env=test -vvv)
            -   run: (cd tests/Application && bin/console cache:clear --env=test -vvv)
            -   run: (cd tests/Application && bin/console cache:warmup --env=test -vvv)
            -   run: ./bin/ecs.sh
            -   run: ./bin/phpstan.sh
            -   run: ./bin/behat

            -   restore_cache:
                    keys:
                        # "composer.lock" can be used if it is committed to the repo
                        - vendor-cache-prefer-lowest-{{ checksum "composer.json" }}-{{ checksum "tests/Application/package.json" }}
                        # fallback to using the latest cache if no exact match is found
                        - vendor-cache-
            -   run: composer update --no-interaction --prefer-lowest
            -   run: yarn --cwd tests/Application install
            -   run: yarn --cwd tests/Application build
            -   save_cache:
                    key: vendor-cache-prefer-lowest-{{ checksum "composer.json" }}-{{ checksum "tests/Application/package.json" }}
                    paths:
                        - ./vendor
                        - ./tests/Application/node_modules
            -   run: (cd tests/Application && bin/console cache:clear --env=test -vvv)
            -   run: (cd tests/Application && bin/console cache:warmup --env=test -vvv)
            -   run: ./bin/ecs.sh
            -   run: ./bin/phpstan.sh
            -   run: ./bin/behat
